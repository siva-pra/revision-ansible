---
- name: install java
  hosts: appserver 
  become: yes
  vars: 
    - home_dir: /opt/tomcat 
    - username: tomcat
    - shell_bin: /bin/false
    - version: 9.0.62
    - tomcat_latest: /opt/tomcat/latest
    - tomcat_latest_sh_path: /opt/tomcat/latest/bin
    - tomcat_serive: tomcat.service
    - tomact_service_dest: /etc/systemd/system
  tasks: 
    - name: update repo and cache  
      ansible.builtin.apt:
        name: "{{ java_package }}"
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"
    - name: instal java 
      ansible.builtin.package:
        name: "{{ java_package }}"
        update_cache: yes
        state: present
      when: ansible_facts['os_family'] == "Debian"
    - name: tomcat user add
      ansible.builtin.user:
        create_home: yes
        home: "{{ home_dir }}"
        name: "{{ username }}"
        shell: "{{ shell_bin }}" 
        state: present
      when: ansible_facts['os_family'] == "Debian"
    - name: download tomcat
      ansible.builtin.get_url:
        url: "https://dlcdn.apache.org/tomcat/tomcat-9/v{{ version }}/bin/apache-tomcat-{{ version }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{ version }}.tar.gz"
      when: ansible_facts['os_family'] == "Debian"  
    - name: extract tomact file
      ansible.builtin.unarchive:
        src: "/tmp/apache-tomcat-{{ version }}.tar.gz"
        dest: "{{ home_dir }}"
        creates: "{{ home_dir }}/tmp/apache-tomcat-{{ version }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        remote_src: yes
    - name: create the symlink
      ansible.builtin.file:
        src: "{{ home_dir }}/apache-tomcat-{{ version }}" 
        dest: "{{ tomcat_latest }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: link
      when: ansible_facts['os_family'] == "Debian" 
    - name: change the owner of tomcat_latest
      ansible.builtin.file:
        path: "{{ home_dir }}"
        state: directory
        recurse: yes
        owner: "{{ username }}"
        group: "{{ username }}"
      when: ansible_facts['os_family'] == "Debian" 
    - name: find the .sh
      ansible.builtin.find:
        paths: "{{ tomcat_latest_sh_path }}"
        patterns: '*.sh*'
      when: ansible_facts['os_family'] == "Debian" 
      register: 'sh_tomact_latest_bin'
    - name: print .sh 
      ansible.builtin.debug:
        var: sh_tomact_latest_bin
      when: ansible_facts['os_family'] == "Debian"
    - name: permissions tomact
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: '0755'
      loop: "{{ sh_tomact_latest_bin.files }}"
      when: ansible_facts['os_family'] == "Debian"
    - name: create tomact service file
      ansible.builtin.file:
        src: "{{ tomcat_serive }}"
        dest: "{{ tomact_service_dest }}/{{ tomcat_serive }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: ansible_facts['os_family'] == "Debian"
    - name: service state enable and reload
      ansible.builtin.systemd :
        name: "{{ tomcat_service }}"
        enabled: yes
        state: started
        daemon_reload: yes
      when: ansible_facts['os_family'] == "Debian"